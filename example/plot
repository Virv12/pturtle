ap  := Y (\map.\f.\l.l nil (\h.\t.cons (f h) (map f t)));
nil   := \f.\g.f;
cons  := \x.\l.\f.\g.g x l;
foldl := Y (\fold.\f.\e.\l.l e (\h.\t.fold f (f e h) t));
foldr := Y (\fold.\f.\e.\l.l e (\h.\t.f h (fold f e t)));
take  := Y (\f.\n.\l.eq 0 n nil (l nil (\h.\t.cons h (f (- n 1) t))));
map   := Y (\map.\f.\l.l nil (\h.\t.cons (f h) (map f t)));

tuple  := Y (\f.\l.\n.eq 0 n (\f.foldr (\a.\b.b a) f l) (\e.f (cons e l) (- n 1))) nil;
pair   := tuple 2;
triple := tuple 3;
fst    := \a.\b.a;
snd    := \a.\b.b;

plot :=
  f := \t.\p.t (\a.\x.\y.p (\x'.\y'.triple (chain a (mv (- x' x) (- y' y))) x' y'));
  \l.l chain (\h.\t.h (\x.\y.(foldl f (triple (chain penup (mv x y) pendw) x y) l)) (\a.\b.\c.a));

fnToList := Y (\self.\s.\d.\f.cons (pair s (f s)) (self (+ s d) d f));

chain
(tr 10 0)
(plot (take 600 (fnToList -6 0.02 sin)))
