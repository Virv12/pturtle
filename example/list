nil  := \f.\g.f;
cons := \x.\l.\f.\g.g x l;
fold := Y (\fold.\f.\e.\l.l e (\h.\t.fold f (f e h) t));
take := Y (\f.\n.\l.eq 0 n nil (l nil (\h.\t.cons h (f (- n 1) t))));
map  := Y (\map.\f.\l.l nil (\h.\t.cons (f h) (map f t)));
at   := Y (\at.\l.\n.l (0 0) (\h.\t.eq n 0 h (at t (- n 1))));
nat  := Y (\f.\n.cons n (f (+ n 1))) 0;
fold + 0 (take 10 nat)
